from datetime import datetime
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, condecimal, conint, constr


class OrderSide(Enum):
    BUY = "buy"
    SELL = "sell"

    @staticmethod
    def from_str(label):
        if label in ('buy'):
            return OrderSide.BUY
        elif label in ('sell'):
            return OrderSide.SELL
        else:
            raise NotImplementedError


class OrderType(Enum):
    MARKET = "market"
    LIMIT = "limit"

    @staticmethod
    def from_str(label):
        if label in ('market'):
            return OrderType.MARKET
        elif label in ('limit'):
            return OrderType.LIMIT
        else:
            raise NotImplementedError



class Order(BaseModel):
    # id generated by the database
    id_: int = Field(..., alias="id")
    created_at: datetime = Field(..., alias="created_at")
    type_: OrderType = Field(..., alias="type")
    side: OrderSide = Field(..., alias="side")
    instrument: constr(min_length=1, max_length=12) = Field(..., alias="instrument")
    limit_price: Optional[condecimal(decimal_places=2)] = Field(..., alias="price")
    quantity: conint(gt=0) = Field(..., alias="quantity")
